<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 常用命令</title>
    <url>/posts/0df114f0-5551-11ef-979b-ffc422e386b2/</url>
    <content><![CDATA[<h2 id="查看-Java-版本"><a href="#查看-Java-版本" class="headerlink" title="查看 Java 版本"></a>查看 Java 版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ java -version</span><br><span class="line">openjdk version &quot;1.8.0_275&quot;</span><br><span class="line">OpenJDK Runtime Environment (Zulu 8.50.0.1017-CA-macos-aarch64) (build 1.8.0_275-b01)</span><br><span class="line">OpenJDK 64-Bit Server VM (Zulu 8.50.0.1017-CA-macos-aarch64) (build 25.275-b01, mixed mode)</span><br></pre></td></tr></table></figure>

<h2 id="运行-Jar-包"><a href="#运行-Jar-包" class="headerlink" title="运行 Jar 包"></a>运行 Jar 包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar app-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<h2 id="后台运行-Jar-包并限制内存"><a href="#后台运行-Jar-包并限制内存" class="headerlink" title="后台运行 Jar 包并限制内存"></a>后台运行 Jar 包并限制内存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -Xms128m -Xmx128m -XX:PermSize=128M -XX:MaxPermSize=128M  -jar app-1.0-SNAPSHOT.jar  &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 微信提现报错：No appropriate protocol (protocol is disabled or cipher suites areinappropr)</title>
    <url>/posts/c8fe00d0-561b-11ef-afd3-650336836e8f/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在新的服务器上搭建 <code>Java</code> 环境，从 <code>Oracle</code> 官网上下载了最新的 <code>jdk</code> 版本 <code>1.8.0_311</code>，然后上传到服务器 <code>jar</code> 包，启动 <code>jar</code> 包，这些常规操作。本以为这个项目搭建就此结束，但是当测试提现功能时，服务器突然报错：<code>No appropriate protocol (protocol is disabled or cipher suites are inappropr</code></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>首先排查了下微信商户号、支付参数等是否有误，但若参数有误的话微信会直接返回相应错误，所以不是该问题。</p>
<p>然后将思路转移到是否是环境问题，则确认了一下之前的服务器上的 <code>jdk</code> 版本和当前服务器 <code>jdk</code> 版本是否一致，因为下载的是最新的，所以已经不一致了</p>
<p>可以提现的服务器 <code>jdk</code> 版本是 <code>212</code><br><img src="https://cdn.learnku.com/uploads/images/202112/01/26846/Y8RDUrD502.png!large"></p>
<p>当前服务器 <code>jdk</code> 版本是 <code>311</code><br><img src="https://cdn.learnku.com/uploads/images/202112/01/26846/dHiYCKkTVX.png!large"></p>
<p>经翻阅互联网文章发现 <code>Java8-291</code> 之后 , 禁用了 <code>TLS1.1</code>, 而我们安装的是 <code>java8-311</code>。并且该禁用该参数会导致微信提现报错，所以我们需要放开该限制。</p>
<h2 id="修改-java-security-文件"><a href="#修改-java-security-文件" class="headerlink" title="修改 java.security 文件"></a>修改 java.security 文件</h2><p>首先找到安装 java 的目录，如果忘记可以通过环境变量中配置的查看<br>环境变量文件在 <code>etc/profile</code><br>我的环境变量文件如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Java</span></span><br><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure>
<p>所以我的目录是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/java/jre/lib/security/java.security</span><br></pre></td></tr></table></figure>
<p>然后搜索 <code>jdk.tls.disabledAlgorithms=</code><br>可找到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jdk.tls.disabledAlgorithms=SSLv3, TLSv1, TLSv1.1, RC4, DES, MD5withRSA, \</span><br><span class="line">    DH keySize &lt; 1024, EC keySize &lt; 224, 3DES_EDE_CBC, anon, NULL, \</span><br><span class="line">    include jdk.disabled.namedCurves</span><br></pre></td></tr></table></figure>

<p>然后删掉 <code>TLSv1</code>, <code>TLSv1.1</code>, 变成如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jdk.tls.disabledAlgorithms=SSLv3, RC4, DES, MD5withRSA, \</span><br><span class="line">    DH keySize &lt; 1024, EC keySize &lt; 224, 3DES_EDE_CBC, anon, NULL, \</span><br><span class="line">    include jdk.disabled.namedCurves</span><br></pre></td></tr></table></figure>

<p>然后保存文件，在重启 jar 包，在测试提现就可以提现到账了。</p>
<p>参考文章：<br><a href="https://blog.csdn.net/weixin_43650943/article/details/118578264">(31条消息) 微信退款 No appropriate protocol (protocol is disabled or cipher suites are inappropr)_YLIHMS的博客-CSDN博客</a><br><a href="https://blog.csdn.net/kfepiza/article/details/119084415?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-8.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-8.no_search_link">(31条消息) Java8(291)之后 , 禁用了TLS1.1 , 使JDBC无法用SSL连接SqlServer2008怎么办,以下是解决办法_kfepiza的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的Webmagic爬虫实践</title>
    <url>/posts/92742730-5a1a-11ef-b560-0b256c027dcc/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有个需求，需要抓取天气的资讯文章，而该项目是用 Java 写的，由于爬虫需求也较小，所以就索性直接用 Java 来爬。</p>
<p>Java 有个包是 <a href="https://github.com/code4craft/webmagic">webmagic</a> 本次就是用的这个包做的实践。</p>
<p>我们要采集的网址是 <a href="https://www.weather.com.cn/index/jqzdtqsj/index.shtml">https://www.weather.com.cn/index/jqzdtqsj/index.shtml</a> 打开这个网址可以看到是个列表，并且有分页。</p>
<h2 id="配置-Maven-依赖"><a href="#配置-Maven-依赖" class="headerlink" title="配置 Maven 依赖"></a>配置 Maven 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="爬虫启动入口类"><a href="#爬虫启动入口类" class="headerlink" title="爬虫启动入口类"></a>爬虫启动入口类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sktk.weather.app.spider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Page;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Spider;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.processor.PageProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherArticleSpider</span> <span class="keyword">implements</span> <span class="title class_">PageProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WeatherArticleDetailSpider weatherArticleDetailSpider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Page page)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 xpath 获取到总页数，取到的是 “共2页”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pageNum</span> <span class="operator">=</span> page.getHtml().xpath(<span class="string">&quot;/html/body/div[3]/div[1]/div/div/span[3]/text()&quot;</span>).get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取到总页数</span></span><br><span class="line">        pageNum = pageNum.substring(<span class="number">1</span>);</span><br><span class="line">        pageNum = pageNum.substring(<span class="number">0</span>, pageNum.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pageNumInt</span> <span class="operator">=</span> Integer.parseInt(pageNum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= pageNumInt; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取每一页的链接，将当前页数拼接到url上</span></span><br><span class="line">            <span class="comment">// 第一页的链接是这个</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">nextUrl</span> <span class="operator">=</span> <span class="string">&quot;https://www.weather.com.cn/index/jqzdtqsj/index.shtml&quot;</span>;</span><br><span class="line">            <span class="comment">// 后面页的链接需要拼起来</span></span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">1</span>) &#123;</span><br><span class="line">                nextUrl = <span class="string">&quot;https://www.weather.com.cn/index/jqzdtqsj/index_&quot;</span> + i + <span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开始爬每一页的数据</span></span><br><span class="line">            weatherArticleDetailSpider.start(nextUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        Spider.create(<span class="built_in">this</span>)</span><br><span class="line">                <span class="comment">// 添加初始爬取页面链接</span></span><br><span class="line">                .addUrl(<span class="string">&quot;https://www.weather.com.cn/index/jqzdtqsj/index.shtml&quot;</span>)</span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="爬取列表和详情类"><a href="#爬取列表和详情类" class="headerlink" title="爬取列表和详情类"></a>爬取列表和详情类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sktk.weather.app.spider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sktk.weather.app.entity.po.Article;</span><br><span class="line"><span class="keyword">import</span> com.sktk.weather.app.service.IArticleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Page;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Site;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Spider;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.processor.PageProcessor;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.selector.Selectable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherArticleDetailSpider</span> <span class="keyword">implements</span> <span class="title class_">PageProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Site</span> <span class="variable">site</span> <span class="operator">=</span> Site.me().setRetryTimes(<span class="number">3</span>).setSleepTime(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WeatherArticlePipeline myPipeline;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Page page)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先取到文章列表</span></span><br><span class="line">        List&lt;Selectable&gt; articleList = page.getHtml().xpath(<span class="string">&quot;/html/body/div[3]/div[1]/dl&quot;</span>).nodes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= articleList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 取到列表中的标题和简介</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> page.getHtml().xpath(<span class="string">&quot;/html/body/div[3]/div[1]/dl[&quot;</span> + i + <span class="string">&quot;]/dd/h3/a/text()&quot;</span>).toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">intro</span> <span class="operator">=</span> page.getHtml().xpath(<span class="string">&quot;/html/body/div[3]/div[1]/dl[&quot;</span> + i + <span class="string">&quot;]/dd/p/text()&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存表</span></span><br><span class="line">            <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Article</span>();</span><br><span class="line">            article.setTitle(title);</span><br><span class="line">            article.setIntro(intro);</span><br><span class="line">            articleService.insertOne(article);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正则匹配到该页面中的所有文章链接并获取内容</span></span><br><span class="line">        page.addTargetRequests(page.getHtml().links()</span><br><span class="line">                .regex(<span class="string">&quot;(https?://www\\.weather\\.com\\.cn/index/\\d&#123;4&#125;/\\d&#123;2&#125;/\\d+\\.shtml)&quot;</span>)</span><br><span class="line">                .all());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过xpath取到所有想要的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> page.getHtml().xpath(<span class="string">&quot;/html/body/div[4]/div/div[1]/div[1]/div[1]/p/text()&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> page.getHtml().xpath(<span class="string">&quot;/html/body/div[4]/div/div[1]/div[1]/div[2]&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">publishTime</span> <span class="operator">=</span> page.getHtml().xpath(<span class="string">&quot;/html/body/div[4]/div/div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/text()&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> page.getHtml().xpath(<span class="string">&quot;/html/body/div[4]/div/div[1]/div[1]/div[1]/div[1]/div[1]/span[2]/a/text()&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">        page.putField(<span class="string">&quot;title&quot;</span>, title);</span><br><span class="line">        page.putField(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">        page.putField(<span class="string">&quot;publishTime&quot;</span>, publishTime);</span><br><span class="line">        page.putField(<span class="string">&quot;source&quot;</span>, source);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果页面中的title未取到的话则跳过</span></span><br><span class="line">        <span class="keyword">if</span> (page.getResultItems().get(<span class="string">&quot;title&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">            page.setSkip(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Site <span class="title function_">getSite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        Spider.create(<span class="built_in">this</span>)</span><br><span class="line">                .addUrl(url)</span><br><span class="line">                <span class="comment">// 使用 Pipeline 保存每条数据结果</span></span><br><span class="line">                .addPipeline(myPipeline)</span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义-Pipeline-类"><a href="#自定义-Pipeline-类" class="headerlink" title="自定义 Pipeline 类"></a>自定义 Pipeline 类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sktk.weather.app.spider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sktk.weather.app.entity.po.Article;</span><br><span class="line"><span class="keyword">import</span> com.sktk.weather.app.service.IArticleService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.ResultItems;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Task;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.pipeline.Pipeline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherArticlePipeline</span> <span class="keyword">implements</span> <span class="title class_">Pipeline</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ResultItems resultItems, Task task)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Article</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : resultItems.getAll().entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;title&quot;</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                article.setTitle(entry.getValue().toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;content&quot;</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                article.setContent(entry.getValue().toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;publishTime&quot;</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                article.setPublishTime(entry.getValue().toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;source&quot;</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                article.setSource(entry.getValue().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        articleService.insertOne(article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定时任务类"><a href="#定时任务类" class="headerlink" title="定时任务类"></a>定时任务类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DailySyncArticleTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WeatherArticleSpider weatherArticleSpider;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时每天晚上11点执行同步天气资讯</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 23 * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        weatherArticleSpider.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，一个用 Java 写的爬取文章列表+分页+详情的爬虫实践就结束了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000020005655">webmagic爬取分页列表数据</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 接口参数解密的实现方法（使用注解）</title>
    <url>/posts/f3e5bb90-5601-11ef-8472-43c66388e441/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 App 开发中，为了防止开发者轻易通过抓包获取到接口请求数据和响应数据，我们会对请求参数进行加密，后端通过解密获取，并加密返回给客户端，客户端通过解密获取。</p>
<p>而如果简单的在每个接口的 Controller 中来对请求参数解密，未免有些太傻，且如果想实现只有正式环境需对请求参数加密，测试环境无需加密，如果这种逻辑在 Controller 中写，更过于傻。</p>
<p>这次通过定义注解的方式来实现接口请求参数的统一解密，并在注解中判断是否需要解密。</p>
<p>加解密本身并不是什么有难度的事情，问题是在何时去处理？定义一个过滤器，将请求和响应分别拦截下来进行处理也是一个办法，这种方式虽然粗暴，但是灵活，因为可以拿到一手的请求参数和响应数据。不过 <code>SpringBoot</code> 中给我们提供了 <code>ResponseBodyAdvice</code> 和 <code>RequestBodyAdvice</code>，利用这两个工具可以对请求和响应进行预处理，非常方便。</p>
<p>所以这篇文章关于接口参数解密我们使用 <code>RequestBodyAdvice</code> 来实现。</p>
<h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><p>接下来我们先定义一个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sktk.keepAccount.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Decrypt &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个注解就是一个标记，在以后使用的过程中，哪个接口&#x2F;参数添加了 <code>@Decrypt</code> 注解就对哪个接口&#x2F;参数进行解密。这个定义也比较简单，没啥好说的。</p>
<p>另外还有一点需要注意，<code>ResponseBodyAdvice</code> 在你使用了 <code>@ResponseBody</code> 注解的时候才会生效，<code>RequestBodyAdvice</code> 在你使用了 <code>@RequestBody</code> 注解的时候才会生效，换言之，前后端都是 JSON 交互的时候，这两个才有用。不过一般来说接口加解密的场景也都是前后端分离的时候才可能有的事。</p>
<h2 id="实现注解"><a href="#实现注解" class="headerlink" title="实现注解"></a>实现注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sktk.keepAccount.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sktk.keepAccount.annotation.Decrypt;</span><br><span class="line"><span class="keyword">import</span> com.sktk.keepAccount.common.core.exception.BaseException;</span><br><span class="line"><span class="keyword">import</span> com.sktk.keepAccount.common.core.exception.SystemErrorType;</span><br><span class="line"><span class="keyword">import</span> com.sktk.keepAccount.common.core.util.AESUtil;</span><br><span class="line"><span class="keyword">import</span> com.sktk.keepAccount.common.core.vo.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求参数解密</span></span><br><span class="line"><span class="comment"> * http://www.zzvips.com/article/187109.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecryptRequest</span> <span class="keyword">extends</span> <span class="title class_">RequestBodyAdviceAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodParameter.hasMethodAnnotation(Decrypt.class) || methodParameter.hasParameterAnnotation(Decrypt.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HttpInputMessage <span class="title function_">beforeBodyRead</span><span class="params">(<span class="keyword">final</span> HttpInputMessage inputMessage, MethodParameter parameter,</span></span><br><span class="line"><span class="params">                                           Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (targetType == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(SystemErrorType.BUSINESS_ERROR, <span class="string">&quot;sdf&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取请求数据byte</span></span><br><span class="line">            <span class="type">byte</span>[] body = <span class="keyword">new</span> <span class="title class_">byte</span>[inputMessage.getBody().available()];</span><br><span class="line"></span><br><span class="line">            inputMessage.getBody().read(body);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转化为字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转换为对象</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">bodyObj</span> <span class="operator">=</span> JSONObject.parseObject(bodyStr);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义无需解密参数</span></span><br><span class="line">            List&lt;String&gt; noDecryptFiled = Arrays.asList(<span class="string">&quot;appClient&quot;</span>, <span class="string">&quot;channel&quot;</span>, <span class="string">&quot;version&quot;</span>, <span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义解密后参数map</span></span><br><span class="line">            HashMap&lt;String, String&gt; decryptParam = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环请求对象</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; stringObjectEntry : bodyObj.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> stringObjectEntry.getKey();</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> stringObjectEntry.getValue().toString();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果是开发环境，无需解密</span></span><br><span class="line">                <span class="keyword">if</span> (Result.getEnv().equals(<span class="string">&quot;dev&quot;</span>)) &#123;</span><br><span class="line">                    decryptParam.put(key, value);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 若是无需解密参数，直接put进decryptParam</span></span><br><span class="line">                <span class="keyword">if</span> (noDecryptFiled.contains(stringObjectEntry.getKey())) &#123;</span><br><span class="line">                    decryptParam.put(key, value);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 解密</span></span><br><span class="line">                decryptParam.put(key, AESUtil.decrypt(value, Result.SALT));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转换为byte</span></span><br><span class="line">            <span class="type">byte</span>[] decrypt = JSON.toJSONString(decryptParam).getBytes(StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decrypt);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpInputMessage</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> InputStream <span class="title function_">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    <span class="keyword">return</span> bais;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> HttpHeaders <span class="title function_">getHeaders</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> inputMessage.getHeaders();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(SystemErrorType.BUSINESS_ERROR, <span class="string">&quot;参数解密失败，请检查&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先大家注意，<code>DecryptRequest</code> 类我们没有直接实现 <code>RequestBodyAdvice</code> 接口，而是继承自 <code>RequestBodyAdviceAdapter</code> 类，该类是 <code>RequestBodyAdvice</code> 接口的子类，并且实现了接口中的一些方法，这样当我们继承自 <code>RequestBodyAdviceAdapter</code> 时，就只需要根据自己实际需求实现某几个方法即可。</li>
<li>supports：该方法用来判断哪些接口需要处理接口解密，我们这里的判断逻辑是方法上或者参数上含有 <code>@Decrypt</code> 注解的接口，处理解密问题。</li>
<li>beforeBodyRead：这个方法会在参数转换成具体的对象之前执行，我们先从流中加载到数据，然后对数据进行解密，解密完成后再重新构造 HttpInputMessage 对象返回。</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.zzvips.com/article/187109.html">Spring Boot 接口参数加密解密的实现方法</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>《做点事》读后感</title>
    <url>/posts/a914faf0-556f-11ef-94ef-f555f749b27a/</url>
    <content><![CDATA[<p><img src="/images/posts/a914faf0-556f-11ef-94ef-f555f749b27a/img.png" alt="《做点事》读后感"><br>题图拍摄于 2022年3月27日长沙居住地</p>
<p>时隔多日，读完了今年的第二本书，《做点事》。</p>
<p>首先介绍一下书的背景，这本书是不对外售卖的，是我的偶像「stormzhang」，张哥的一本书，属于内部星球球友的福利。</p>
<p>虽然张哥说这本书的书名起的比较随意，但我个人是非常喜欢这个名字的，人生在世，总得做点事。</p>
<p>起初我是从 2 月 4 日开始读的这本书，在读到将近一半的时候，因为星球有一期共读挑战，恰巧共读的书籍就是这本《做点事》，所以，我索性报名参加了这期共读挑战，从头开始读这本书，原因在于我想和大家一起共读这本书，并且每天共读都有一个打卡，要分享自己在书中阅读到的精华笔记，并发表个人感悟。</p>
<p>总共历时 21 天，从 3 月份开始的，到今天已经完整地将书内的内容全部读完，今天就来打卡总结这本书的内容。</p>
<p>书中共有 10 大板块，其中包括「关于赚钱、关于职场、关于产品、关于认知、关于思维、关于践行、关于写作、关于投资、关于商业、关于创业」。</p>
<p>最后还有一部分的对于商业案例的分享，其中包括「知乎好物、小红书、剧本杀、视频号、哔哩哔哩、闲鱼、淘宝蓝海」这几个部分。</p>
<p>今天我对于这 10 大板块和最后一部分的商业案例，总共 11 段落总结一下个人心得，输出一下自己在这本书中的收获。</p>
<p>这本书读起来特别的顺畅，让你有种爱上读书的感觉，因为张哥一直强调的是写作不是写的专业名词越多，越复杂的才叫一篇好的文章或者一本好的书籍，写作最终目的是能够将业内的一些专业术语通过大白话或者类比的形式让书中晦涩难懂的部分更好的呈现给读者，这才是最厉害的所在。</p>
<p>所以，这本书读起来不会累，但又会让你学习到很多东西。</p>
<p>书中很多内容其实在我看来不是教你这件事情怎么做，如何做，更多的是在教你如何提高你的认知能力，因为知识和认知是不同的，知识是具体到某一件事情该如何做。</p>
<p>比如编程这件事情，你学会了，这属于知识，而认知是在任何行业都是通用的，这属于更通用的能力，能够让你不局限于某一个行业，有更大局的思维去看待任何事物。</p>
<p>一个人的认知能力越强，那么他能够赚到钱的概率就越强，而认知能力不是光靠努力就能得到的，这需要平时多接触不同领域的人脉、多接触不同的环境、多去深度思考才能得到的能力。</p>
<p>光有认知还不行，要有很强的执行力，通过自己的认知再加上执行力，当遇到一些新的机会时能尽早的抓住机会，发现商机，才能够真正的赚到钱。</p>
<p>而执行力就需要做到知行合一，你在课本上学到的知识也好，认知也好，如果不通过实践去去检验真理，那其实都是属于理论知识。</p>
<p>这也就需要我们坚持长期的价值，一直朝着心中的目标前进，日复一日，年复一年，坚持做下去总会有意想不到的结果发生。</p>
<p>还有一点就是不要给自己设限，其实就是说，你是什么样的人，取决于你想成为什么样的人，只要你想学就一定能学成，我时常对一些自己不熟悉的东西产生恐惧感，害怕学不会等，慢慢的我觉得这种想法真是错上加错，只是为了逃避选择的借口，在无数次领导给的任务，自己不知道如何完成，觉得很复杂，但是经过一点点的拆解，慢慢的实现，最终完成后都会觉得也没什么难得，不过如此。</p>
<p>现在这个时代能让你挣钱的不是取决于你会某一项技能，这只能说让你能够在这个社会上生存下去，有一个能吃饱穿暖饿不死的技能在，能让你挣钱的永远取决于你这个人的思维方式、做事态度。这能决定你可以干成多大的事情。</p>
<p>而且没有一个职业有谁能够确保干一辈子，时代的变化中，每个人都是时代的一粒尘埃，要学会拥抱时代，拥抱变化。</p>
<p>在最后的商业案例部分，让我有了一些对商业的认知，原来这件事情还可以这么挣钱，原来这件事情这么复杂，或者原来这件事情这么简单，但是简单不代表任何人都能挣钱，所以，实践才是真理。</p>
<p>以上，就是我认为对于本书内容的一个精华部分的理解。</p>
<p>最后，很感谢张哥写了这么一本书，让我们能够知道这么多商业玩法、底层逻辑、开拓眼界。</p>
<p>好了，这次的读书分享就到这里了。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《底层逻辑》读后感</title>
    <url>/posts/f99e2830-556e-11ef-b5b0-e3aaa920b5b0/</url>
    <content><![CDATA[<p>这是 2022 年读的第一本书，《底层逻辑》，这本书读了有 6 个小时左右（微信读书 App 记录的时间），从什么时候开始读的忘记了，下本书应该记录一下从什么时候开始读的。这也是第一次写读后感，也不知道怎么落笔，就简单的先从介绍下这本书的内容，到我读这本书的感受，到最后读完这本书有什么感想按照这样的顺序来说吧。</p>
<p>这本书的作者是吕白，是 21 年 9 月份的新书，我是在微信读书 App 上读的，这本书共有四大部分，分别为：人生逆袭的五个核心算法、突破阶层的四个关键、向上进阶的三大思维、锚定未来的四大策略。这本书的作者本身也是个作家，也是运营微信公众号的早期先行者，写过很多爆款，其中还著有《人人都能学会的刷屏文案写作技巧》、《人人都能做出爆款短视频》等书。</p>
<p>这本书中讲了作者从大学到工作多年来的经历，经历中是如何一步步提升的，如何透析任何事情的本质，从个人成长，到职场规则，都以作者个人的经历，一件具体的故事展开。</p>
<p>读这本书最大的感受是不论何时何地不能停止思考，一直思考才能使人进步，要始终保持长期投资的目光，不要计较短期的得失，人生是一场马拉松，不是百米赛跑，不用拼命冲刺，一直努力就好。关于焦虑，有什么难事千万别耗着、等着，那只会让人在无尽的焦虑中备受煎熬，因为这时你焦虑的可能不是某件事情，而是焦虑本身；你烦恼的可能不是怎么去解决问题，而是“问题这么多，我该怎么办”。所以当遇到什么难事的勇敢的去面对，去推进，到最后发现可能事实是这件事情并没有你想象的那么难，在我身上也经常发生这种事情，工作中遇到了一些难题也会焦虑，但当你真正开始推进这件事情，一个个之前焦虑的点都被逐个攻破，到最后觉得很难的事情其实也并不难嘛。</p>
<p>没有目标的努力，只是自我欺骗，现在是一个连傻瓜都会努力的时代。没有思考、没有总结的努力是不会带来任何回报的，反而会让你越来越累。没有目标的努力就像是在黑夜里努力的奔跑寻找终点却不知道自己是跑错了方向，最后目标也得不到，自己的耐心也在一点点消耗。努力固然重要，但是决定一个人成功的因素最关键的往往不是他有多么努力，而是善于每日复盘、深度思考，总结自己的不足，补充有哪些需要改善的地方，还有努力的方向很重要，只有抓住了行业风口，自己的努力才能被无限放大，才能真正起到努力的作用。</p>
<p>当然，书中也有一些我不认同的观念，其中，有一小节是「简单记忆：少就是多，记住你能记住的」中作者说到作者所在公司每个月都会邀请业界“大咖”举行讲座的传统。每次听讲座时，同事总是习惯记录“大咖”讲的每一句话，而作者却从不记录，书中说到：不做无意义的记忆，而对自己用得上的内容，就要花费心思努力记忆，甚至举一反三。但在「在北京工作的100种好处」一小节中写道去国贸听讲座，用笔记本电脑记下的笔记有一万多字。和上一节中的内容观念就有些矛盾了，只能说每个人在不同阶段都有不同的适合自己的学习做法，适合自己最重要，而我属于记忆力比较差的那种，所以我选择尽可能的把一些工作中的、日常中的都整理成文章、笔记记录下来，也希望这是一种沉淀。</p>
<p>这里插一句是，《底层逻辑》这本书是看到了俞敏洪老师的一个视频推荐这本书，当时俞敏洪老师推荐的《底层逻辑》作者为刘润，但是当我开始写这篇读后感时才发现，我看的这本《底层逻辑》的作者是吕白，闹了个笑话，都看完了，才发现自己看错了，实际上《底层逻辑》这本书有三本同名书，但这本书写的也是不错的，后面可以在读一下刘润的那本《底层逻辑》。写这篇读后感是希望自己在今后每读一本书都能有一个沉淀，越来越有种强烈的感觉，总得记录点什么，才能不愧对自己记性这么差，哈哈。</p>
<p>这是第一次写读后感，或许没有很好的将自己的感受表达出来，也没有很好的将这本书的精华表现出来，文笔也比较菜，经常是面对电脑屏幕半天不知道怎么落笔，也希望在文字表达方面后续能够慢慢进步。</p>
<p>最后，读书这个东西，不是你读得越多，就知识越多，就会的越多，其实，书上的很多知识，很多道理很多人都懂，但关键的是要付出实践，努力践行每一处对自己有帮助的地方，要做到知行合一，最终才有可能真正成为你的知识。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>又传来猝死消息，生命只有一次</title>
    <url>/posts/385f5f80-556f-11ef-964a-5bbc126f89a9/</url>
    <content><![CDATA[<p>这件事还要从昨天晚上说起，昨天看到字节跳动员工猝死的消息，本来还在怀疑事情的可信性。</p>
<p>随后，今天一大早铺天盖地的各种网上消息迎面而来，说是字节视频架构部门的图像算法工程师在健身房健身时突发不适，告知工作人员，但未及时处理，导致错过黄金抢救时间，最终抢救了 41 小时无效，彻底的留下了他身怀 2 个月胎儿在身的老婆和按揭 30 年每月需要还 21000 的房贷，而他也才 28 岁。</p>
<p>这对他的老婆来说无疑是晴天霹雳，她现在的想法是想把房子卖掉，等后事办妥后回老家把小孩生出来，孕育小孩长大，抚养成人，度过这一生。若不是因为身怀胎儿，她想过直接随丈夫一起去了。</p>
<p>我很佩服这位当事人妻子的理性，为了肚子里的孩子要强迫自己休息、吃东西。</p>
<p>他们异地恋了 8 年，结婚了 3 年多，他们本应该是欣喜的等着宝宝的降生，原本也有能力承受每月 21000 的房贷，而突如其来的噩耗打破了原本属于 3 个家庭的平静。</p>
<p>下午的时候，字节发了一篇回应，讲了会给当事人家属抚恤和关怀，言语上看着态度还算是诚恳，而具体的事情如何落实就不得而知，如果落实到位，家属没有异议，那也算是给死者一个最后的体面。</p>
<p><img src="/images/posts/385f5f80-556f-11ef-964a-5bbc126f89a9/img.png" alt="图片"></p>
<p>在这个信息发展飞速的时代，对于「猝死」这一词其实已经屡见不鲜了，而 「猝死」这一词往往又带着「内卷」，我想说，或许我们无法改变这个内卷的时代，因为你无法阻挡有那么多的人愿意为资本卖命，这些人承受着房贷、车贷、一家人的开支，他们还指望着加班来换取加班费，或许，你也是这样。</p>
<p>但是，我们能做的是，身体是我们自己的，我们应该去尽力做到在工作与身体健康中找到一个平衡点。</p>
<p>并且要定期体检，了解自己的身体健康情况，有效地对自己的身体做一些检测。</p>
<p>适当的健身是一件好事，但也要注意的是，一定要在确保身体放松的时候，而不是劳累了一天或刚通宵加完班，这时候本身就很累了，而去为了健身而健身，反而适得其反。</p>
<p>在工作中也不要拼命的干，活是永远干不完的，尽自己的本能多去提高工作效率让自己做到问心无愧就好了，网上有人找到了死者在工作期间的代码提交记录，有很多提交事件发生在凌晨 3 点、6 点。这真的是拿工作当玩命了。</p>
<p><img src="/images/posts/385f5f80-556f-11ef-964a-5bbc126f89a9/img_1.png" alt="图片"></p>
<p>我也希望在今后，自己能够做到工作和身体健康上的平衡，虽然在这个人人内卷的时代，在这个各大企业都开始优化人员向市场输送大批拥有大厂经验的人才，我们还是可以抽出点时间来做做运动，至少，我们还有一个健康的身体，能有时间去争取一些属于自己的东西。</p>
<p>最后，希望人人都能保持适当的锻炼，充足的睡眠，健康的饮食，毕竟，人得先活着才有可能去追逐属于自己的东西。</p>
]]></content>
      <tags>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝周期扣款逻辑梳理和代码流程设计</title>
    <url>/posts/456a9e30-5612-11ef-bca1-43081da04e95/</url>
    <content><![CDATA[<h2 id="周期扣款支付后签约场景文档"><a href="#周期扣款支付后签约场景文档" class="headerlink" title="周期扣款支付后签约场景文档"></a>周期扣款支付后签约场景文档</h2><p><a href="https://opendocs.alipay.com/open/20190319114403226822/intro">支付宝周期扣款产品介绍</a></p>
<h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><ol>
<li>请求支付字符串时携带签约信息拉起支付，并创建待签约的订阅表信息</li>
<li>处理签约成功回调，添加到订阅表</li>
<li>定时任务自行请求订阅表，把达到扣款日期的订阅，然后请求支付宝扣款，再计算下次扣款时间</li>
<li>处理签约解除回调，修改订阅表数据状态。（需要去设置网关回调地址）</li>
</ol>
<h2 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a>数据表设计</h2><h3 id="1-用户周期扣款订阅表"><a href="#1-用户周期扣款订阅表" class="headerlink" title="1. 用户周期扣款订阅表"></a>1. 用户周期扣款订阅表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `customer_period_subscribe` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `app_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `customer_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `vip_config_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;签约时购买的vip配置ID&#x27;</span>,</span><br><span class="line">  `channel` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `version` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `oaid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `contract_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;支付宝商家本地唯一签约号&#x27;</span>,</span><br><span class="line">  `contract_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;签约成功时间&#x27;</span>,</span><br><span class="line">  `cancel_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;解约时间&#x27;</span>,</span><br><span class="line">  `contract_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;订阅状态，0未订阅，1签约中，2已订阅，-1已退订&#x27;</span>,</span><br><span class="line">  `agreement_no` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;支付宝平台签约成功返回签约号&#x27;</span>,</span><br><span class="line">  `next_pay_date` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;商户系统下次扣款日期&#x27;</span>,</span><br><span class="line">  `contract_next_pay_date` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;签约时第三方系统下次扣款日期&#x27;</span>,</span><br><span class="line">  `pay_amount` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0.00&#x27;</span> COMMENT <span class="string">&#x27;签约扣款价格&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">35</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户周期购签约表&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-周期扣款日志表"><a href="#2-周期扣款日志表" class="headerlink" title="2. 周期扣款日志表"></a>2. 周期扣款日志表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `customer_period_pay_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `app_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `customer_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `period_subscribe_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;周期购订阅记录ID&#x27;</span>,</span><br><span class="line">  `pay_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;支付记录ID&#x27;</span>,</span><br><span class="line">  `subject` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;周期扣款描述&#x27;</span>,</span><br><span class="line">  `resp_json` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;请求周期扣款接口响应数据&#x27;</span>,</span><br><span class="line">  `pay_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;扣款状态，-1扣款失败，1扣款成功&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;执行日期&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">8</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;周期扣款记录表&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-支付宝周期扣款签约回调表"><a href="#3-支付宝周期扣款签约回调表" class="headerlink" title="3. 支付宝周期扣款签约回调表"></a>3. 支付宝周期扣款签约回调表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `alipay_sign_callback` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;回调情况 0未处理 1处理已完成&#x27;</span>,</span><br><span class="line">  `callback_json` text COMMENT <span class="string">&#x27;整个订单数据序列化，后续需要再拿出来使用&#x27;</span>,</span><br><span class="line">  `external_agreement_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;支付宝商家签约号&#x27;</span>,</span><br><span class="line">  `callback_status` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;回调状态;正常:NORMAL,解约:UNSIGN,暂存，协议未生效过:TEMP,暂停:STOP&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;支付宝周期购签约回调表&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="接周期扣款要注意的点"><a href="#接周期扣款要注意的点" class="headerlink" title="接周期扣款要注意的点"></a>接周期扣款要注意的点</h2><ol>
<li><p>支付宝的周期扣款，后续的扣款是商家自行请求扣款接口的，支付宝是不会帮你们做定时器然后回调接口提示你已经扣款的。需要你自己写定时任务计算好扣款日期，再去请求支付宝的，然后支付宝可以提前5天扣款。</p>
</li>
<li><p>周期扣款日期不能是28号到月底最后一天的，假设下次扣款日是9月28日，那么建议你设置扣款日期是下个月的1～3号，也就是这个字段：execute_time</p>
</li>
<li><p>周期扣款的后续，商家自行请求支付宝时候，每笔扣款是100元内，也就是你接入周期扣款的时候，后续的每笔自动扣款都必须是100元内，没得提升，想要提升额度就是要用商家代扣，具体问问alipay客服。</p>
</li>
</ol>
<h2 id="代码层"><a href="#代码层" class="headerlink" title="代码层"></a>代码层</h2><h3 id="创建支付订单"><a href="#创建支付订单" class="headerlink" title="创建支付订单"></a>创建支付订单</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建用户待签约订购记录数据 customer_period_subscribe</span></span><br><span class="line"></span><br><span class="line"><span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config.protocol = <span class="string">&quot;https&quot;</span>;</span><br><span class="line">config.gatewayHost = <span class="string">&quot;openapi.alipay.com&quot;</span>;</span><br><span class="line">config.signType = <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">config.appId = application.getAlipayAppId();</span><br><span class="line">config.merchantPrivateKey = application.getAlipayMchPrivateKey();</span><br><span class="line">config.alipayPublicKey = application.getAlipayPublicKey();</span><br><span class="line"><span class="comment">// 可设置异步通知接收服务地址（可选）</span></span><br><span class="line">config.notifyUrl = alipayCallbackUrl;</span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">Factory.setOptions(config);</span><br><span class="line"></span><br><span class="line">AlipayTradeAppPayResponse response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;会员支付&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//签约接入的方式</span></span><br><span class="line">  Map&lt;String, String&gt; accessParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  accessParams.put(<span class="string">&quot;channel&quot;</span>, <span class="string">&quot;ALIPAYAPP&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//签约规则</span></span><br><span class="line">  Map&lt;String, Object&gt; periodRuleParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">//周期类型枚举值为 DAY 和 MONTH  periodRuleParams.put(&quot;period_type&quot;, &quot;MONTH&quot;);</span></span><br><span class="line">  <span class="comment">//周期数，与 period_type 组合使用确定扣款周期</span></span><br><span class="line">  periodRuleParams.put(<span class="string">&quot;period&quot;</span>, vipConfig.getMonthNumber());</span><br><span class="line">  <span class="comment">//用户签约后，下一次使用代扣支付扣款的时间，支付宝周期扣不能大于 28号, 如果周期扣款当天计算是大于本月28号的，建议设置到下个月的1～3号</span></span><br><span class="line">  periodRuleParams.put(<span class="string">&quot;execute_time&quot;</span>, alipayExecuteTime);</span><br><span class="line">  <span class="comment">//周期扣款每笔限制扣款最大金额,目前支付宝最大是100元上限</span></span><br><span class="line">  periodRuleParams.put(<span class="string">&quot;single_amount&quot;</span>, vipConfig.getAlipayPrice());</span><br><span class="line"></span><br><span class="line">  Map&lt;String, Object&gt; agreementSignParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">//个人签约产品码固定为CYCLE_PAY_AUTH_P</span></span><br><span class="line">  agreementSignParams.put(<span class="string">&quot;personal_product_code&quot;</span>, <span class="string">&quot;CYCLE_PAY_AUTH_P&quot;</span>);</span><br><span class="line">  <span class="comment">//协议签约场景，参见下文sign_scene参数说明</span></span><br><span class="line">  agreementSignParams.put(<span class="string">&quot;sign_scene&quot;</span>, <span class="string">&quot;INDUSTRY|BOOKKEEPING&quot;</span>);</span><br><span class="line">  <span class="comment">//签约接入的方式</span></span><br><span class="line">  agreementSignParams.put(<span class="string">&quot;access_params&quot;</span>, accessParams);</span><br><span class="line">  <span class="comment">//签约规则</span></span><br><span class="line">  agreementSignParams.put(<span class="string">&quot;period_rule_params&quot;</span>, periodRuleParams);</span><br><span class="line">  <span class="comment">//商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）。</span></span><br><span class="line">  <span class="comment">//格式规则：支持大写小写字母和数字，最长32位。</span></span><br><span class="line">  <span class="comment">//商户系统按需传入，如果同一用户在同一产品码、同一签约场景下，签订了多份代扣协议，那么需要指定并传入该值。</span></span><br><span class="line">  agreementSignParams.put(<span class="string">&quot;external_agreement_no&quot;</span>, contractNo);</span><br><span class="line">  <span class="comment">// 签约成功回调地址，需注意，解约时的回调地址是回调应用网关</span></span><br><span class="line">  agreementSignParams.put(<span class="string">&quot;sign_notify_url&quot;</span>, alipaySignCallbackUrl);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 发起API调用</span></span><br><span class="line">  response = Factory.Payment.App()</span><br><span class="line">	   <span class="comment">// 周期扣款固定产品码</span></span><br><span class="line">	  .optional(<span class="string">&quot;product_code&quot;</span>, <span class="string">&quot;CYCLE_PAY_AUTH&quot;</span>)</span><br><span class="line">	  <span class="comment">// 签约参数</span></span><br><span class="line">	  .optional(<span class="string">&quot;agreement_sign_params&quot;</span>, agreementSignParams)</span><br><span class="line">	  .pay(subject, pay.getOutTradeNo(), totalAmount);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 处理响应或异常</span></span><br><span class="line">  <span class="keyword">if</span> (!ResponseChecker.success(response)) &#123;</span><br><span class="line">		 log.error(<span class="string">&quot;支付宝调用失败&quot;</span>);</span><br><span class="line">		 <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(SystemErrorType.SYSTEM_BUSY);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">	log.error(<span class="string">&quot;支付宝调用失败，原因：&quot;</span> + e.getMessage());</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(SystemErrorType.SYSTEM_BUSY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="签约结果回调"><a href="#签约结果回调" class="headerlink" title="签约结果回调"></a>签约结果回调</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付宝周期扣款签约结果回调</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/alipaySignNotify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">alipaySignNotify</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取支付宝POST过来反馈信息</span></span><br><span class="line">	Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">	<span class="type">Map</span> <span class="variable">requestParams</span> <span class="operator">=</span> request.getParameterMap();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> requestParams.keySet().iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) iter.next();</span><br><span class="line">        String[] values = (String[]) requestParams.get(name);</span><br><span class="line">        <span class="type">String</span> <span class="variable">valueStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            valueStr = (i == values.length - <span class="number">1</span>) ? valueStr + values[i] : valueStr + values[i] + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//乱码解决，这段代码在出现乱码时使用。</span></span><br><span class="line">        <span class="comment">//valueStr = new String(valueStr.getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);</span></span><br><span class="line">        params.put(name, valueStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.error(<span class="string">&quot;支付宝周期扣款签约成功回调参数=&quot;</span> + JSON.toJSONString(params));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vipService.alipaySignCallback(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">alipaySignCallback</span><span class="params">(Map&lt;String, String&gt; params)</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!params.containsKey(<span class="string">&quot;external_agreement_no&quot;</span>) || !params.containsKey(<span class="string">&quot;status&quot;</span>) || !params.containsKey(<span class="string">&quot;agreement_no&quot;</span>)) &#123;</span><br><span class="line">		log.error(<span class="string">&quot;支付宝周期扣款回调，无效请求，必需字段不存在，params=&quot;</span> + JSON.toJSONString(params));</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="type">String</span> <span class="variable">externalAgreementNo</span> <span class="operator">=</span> params.get(<span class="string">&quot;external_agreement_no&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> params.get(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">agreementNo</span> <span class="operator">=</span> params.get(<span class="string">&quot;agreement_no&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 插入回调记录</span></span><br><span class="line">	<span class="type">AlipaySignCallback</span> <span class="variable">alipaySignCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipaySignCallback</span>();</span><br><span class="line">	alipaySignCallback.setExternalAgreementNo(externalAgreementNo);</span><br><span class="line">	alipaySignCallback.setCallbackJson(JSON.toJSONString(params));</span><br><span class="line">	alipaySignCallback.setCallbackStatus(status);</span><br><span class="line">	alipaySignCallbackMapper.insert(alipaySignCallback);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查询用户订阅记录</span></span><br><span class="line">	<span class="type">CustomerPeriodSubscribe</span> <span class="variable">customerPeriodSubscribe</span> <span class="operator">=</span> customerPeriodSubscribeMapper.findByContractNo(externalAgreementNo);</span><br><span class="line">	<span class="keyword">if</span> (CommonUtils.isNullOrEmpty(customerPeriodSubscribe)) &#123;</span><br><span class="line">		log.error(<span class="string">&quot;支付宝周期扣款回调，该签约号有误, params=&quot;</span> + JSON.toJSONString(params));</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果是签约</span></span><br><span class="line">	<span class="keyword">if</span> (status.equals(<span class="string">&quot;NORMAL&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果签约状态不是签约中</span></span><br><span class="line">		<span class="keyword">if</span> (customerPeriodSubscribe.getContractStatus() != <span class="number">1</span>) &#123;</span><br><span class="line">				log.error(<span class="string">&quot;支付宝周期扣款回调，用户订阅记录签约状态不是签约中, params=&quot;</span> + JSON.toJSONString(params));</span><br><span class="line">				 <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新用户订阅状态</span></span><br><span class="line">		customerPeriodSubscribe.setContractStatus(<span class="number">2</span>);</span><br><span class="line">		customerPeriodSubscribe.setContractTime(DateUtil.date());</span><br><span class="line">		customerPeriodSubscribe.setAgreementNo(agreementNo);</span><br><span class="line">		customerPeriodSubscribeMapper.updateById(customerPeriodSubscribe);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果是解约</span></span><br><span class="line">	<span class="keyword">if</span> (status.equals(<span class="string">&quot;UNSIGN&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果签约状态不是签约中</span></span><br><span class="line">		<span class="keyword">if</span> (customerPeriodSubscribe.getContractStatus() != <span class="number">2</span>) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;支付宝周期扣款回调，用户订阅记录签约状态不是订阅中，解约失败, params=&quot;</span> + JSON.toJSONString(params));</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		customerPeriodSubscribe.setContractStatus(-<span class="number">1</span>);</span><br><span class="line">		customerPeriodSubscribe.setCancelTime(DateUtil.date());</span><br><span class="line">		customerPeriodSubscribeMapper.updateById(customerPeriodSubscribe);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新回调记录状态</span></span><br><span class="line">	alipaySignCallback.setStatus(<span class="number">1</span>);</span><br><span class="line">	alipaySignCallbackMapper.updateById(alipaySignCallback);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定时扣款逻辑"><a href="#定时扣款逻辑" class="headerlink" title="定时扣款逻辑"></a>定时扣款逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAlipayPeriodPay</span><span class="params">(List&lt;CustomerPeriodSubscribe&gt; list)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;CustomerPeriodSubscribe&gt; updatePeriodSubscribeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (CustomerPeriodSubscribe item : list) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断今日是否已执行过扣款</span></span><br><span class="line">        <span class="type">CustomerPeriodPayLog</span> <span class="variable">customerPeriodPayLog</span> <span class="operator">=</span> customerPeriodPayLogMapper.findExecuteData(</span><br><span class="line">                item.getCustomerId(), item.getId(), DateUtils.getCurrentDate());</span><br><span class="line">        <span class="keyword">if</span> (!CommonUtils.isNullOrEmpty(customerPeriodPayLog)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户ID：&#123;&#125;, periodSubscribeId: &#123;&#125;, 今日已执行过扣款，跳过&quot;</span>, item.getCustomerId(), item.getId());</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取应用参数</span></span><br><span class="line">        <span class="type">Application</span> <span class="variable">application</span> <span class="operator">=</span> commonService.getRedisApplicationByAppId(item.getAppId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取会员价格配置</span></span><br><span class="line">        <span class="type">VipConfig</span> <span class="variable">vipConfig</span> <span class="operator">=</span> vipConfigMapper.findById(item.getVipConfigId());</span><br><span class="line">        <span class="keyword">if</span> (CommonUtils.isNullOrEmpty(vipConfig)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询该用户</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerService.findById(item.getCustomerId());</span><br><span class="line">        <span class="keyword">if</span> (CommonUtils.isNullOrEmpty(customer)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户ID：&#123;&#125; 不存在，不执行扣款&quot;</span>, item.getCustomerId());</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果执行扣款是VIP会员</span></span><br><span class="line">        <span class="keyword">if</span> (ParentVipTypeEnum.vip.getType().equals(vipConfig.getParentType().intValue())) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果已经是终身vip了</span></span><br><span class="line">            <span class="keyword">if</span> (VipTypeEnum.lifelong.getType().equals(customer.getVipType())) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;用户ID：&#123;&#125; 已经是终身会员，不执行周期扣款&quot;</span>, item.getCustomerId());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (VipTypeEnum.adVipLifelong.getType().equals(customer.getAdVipType())) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;用户ID：&#123;&#125; 已经是终身免广告会员，不执行周期扣款&quot;</span>, item.getCustomerId());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建支付记录和vip记录</span></span><br><span class="line">        <span class="type">BeforeBuyVipBo</span> <span class="variable">beforeBuyVipBo</span> <span class="operator">=</span> vipService.beforeBuyVip(item.getCustomerId(),</span><br><span class="line">                vipConfig.getParentType().intValue(), vipConfig.getType(),</span><br><span class="line">                item.getChannel(), item.getVersion(), PayTypeEnum.alipay, item.getOaid(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">parentVipTypeDesc</span> <span class="operator">=</span> ParentVipTypeEnum.getDesc(vipConfig.getParentType().intValue());</span><br><span class="line">        <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> item.getChannel() + <span class="string">&quot;-&quot;</span> + item.getVersion() + <span class="string">&quot;-&quot;</span> + item.getCustomerId() + <span class="string">&quot;-&quot;</span></span><br><span class="line">                + parentVipTypeDesc + <span class="string">&quot;-&quot;</span> + vipConfig.getTitle() + <span class="string">&quot;-&quot;</span> + application.getAppName() + <span class="string">&quot;自动续费会员支付&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调起自动扣款</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tradePayResp</span> <span class="operator">=</span> <span class="built_in">this</span>.alipayTradePay(application.getAlipayAppId(), application.getAlipayMchPrivateKey(),</span><br><span class="line">                application.getAlipayPublicKey(), item.getAgreementNo(), item.getPayAmount().toString(), subject,</span><br><span class="line">                beforeBuyVipBo.getPay().getOutTradeNo());</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">payRespMap</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            payRespMap = JSON.parseObject(tradePayResp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignored) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">payStatus</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (payRespMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果接口调用成功</span></span><br><span class="line">            <span class="keyword">if</span> (payRespMap.getString(<span class="string">&quot;code&quot;</span>).equals(<span class="string">&quot;10000&quot;</span>)) &#123;</span><br><span class="line">                payStatus = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入周期扣日志</span></span><br><span class="line">        customerPeriodPayLog = <span class="keyword">new</span> <span class="title class_">CustomerPeriodPayLog</span>();</span><br><span class="line">        customerPeriodPayLog.setAppId(application.getId());</span><br><span class="line">        customerPeriodPayLog.setCustomerId(item.getCustomerId());</span><br><span class="line">        customerPeriodPayLog.setPeriodSubscribeId(item.getId());</span><br><span class="line">        customerPeriodPayLog.setPayId(beforeBuyVipBo.getPay().getId());</span><br><span class="line">        customerPeriodPayLog.setSubject(subject);</span><br><span class="line">        customerPeriodPayLog.setRespJson(tradePayResp);</span><br><span class="line">        customerPeriodPayLog.setPayStatus(payStatus);</span><br><span class="line">        customerPeriodPayLog.setDate(DateUtil.date().toDateStr());</span><br><span class="line">        customerPeriodPayLogMapper.insert(customerPeriodPayLog);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果扣款成功</span></span><br><span class="line">        <span class="keyword">if</span> (payStatus.equals(<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="type">CustomerPeriodSubscribe</span> <span class="variable">updatePeriodSubscribeData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerPeriodSubscribe</span>();</span><br><span class="line">            updatePeriodSubscribeData.setId(item.getId());</span><br><span class="line">            <span class="comment">// 下次系统扣款日</span></span><br><span class="line">            updatePeriodSubscribeData.setNextPayDate(</span><br><span class="line">                    DateUtil.format(</span><br><span class="line">                            DateUtil.offsetMonth(</span><br><span class="line">                                    DateUtil.parseDate(item.getNextPayDate()), <span class="number">1</span>), <span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">            updatePeriodSubscribeData.setContractNextPayDate(DateUtil.format(</span><br><span class="line">                    DateUtil.offsetMonth(</span><br><span class="line">                            DateUtil.parseDate(item.getContractNextPayDate()), <span class="number">1</span>), <span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">            updatePeriodSubscribeList.add(updatePeriodSubscribeData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (updatePeriodSubscribeList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        customerPeriodSubscribeService.updateBatchById(updatePeriodSubscribeList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">alipayTradePay</span><span class="params">(String alipayAppId, String alipayMchPrivateKey, String alipayPublicKey,</span></span><br><span class="line"><span class="params">                            String agreementNo, String totalAmount, String subject, String outTradeNo)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    config.protocol = <span class="string">&quot;https&quot;</span>;</span><br><span class="line">    config.gatewayHost = <span class="string">&quot;openapi.alipay.com&quot;</span>;</span><br><span class="line">    config.signType = <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">    config.appId = alipayAppId;</span><br><span class="line">    config.merchantPrivateKey = alipayMchPrivateKey;</span><br><span class="line">    config.alipayPublicKey = alipayPublicKey;</span><br><span class="line">    <span class="comment">// 可设置异步通知接收服务地址（可选）</span></span><br><span class="line">    config.notifyUrl = alipayCallbackUrl;</span><br><span class="line">    <span class="comment">// 设置参数</span></span><br><span class="line">    Factory.setOptions(config);</span><br><span class="line"></span><br><span class="line">    AlipayOpenApiGenericResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; agreementSignParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        agreementSignParams.put(<span class="string">&quot;agreement_no&quot;</span>, agreementNo);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; bizContents = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        bizContents.put(<span class="string">&quot;product_code&quot;</span>, <span class="string">&quot;CYCLE_PAY_AUTH&quot;</span>);</span><br><span class="line">        bizContents.put(<span class="string">&quot;agreement_params&quot;</span>, agreementSignParams);</span><br><span class="line">        bizContents.put(<span class="string">&quot;out_trade_no&quot;</span>, outTradeNo);</span><br><span class="line">        bizContents.put(<span class="string">&quot;total_amount&quot;</span>, totalAmount);</span><br><span class="line">        bizContents.put(<span class="string">&quot;subject&quot;</span>, subject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发起API调用</span></span><br><span class="line">        response = Factory.Util.Generic().execute(<span class="string">&quot;alipay.trade.pay&quot;</span>, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), bizContents);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理响应或异常</span></span><br><span class="line">        <span class="keyword">if</span> (!ResponseChecker.success(response)) &#123;</span><br><span class="line">            System.out.println(response.toMap());</span><br><span class="line">            log.error(<span class="string">&quot;支付宝调用失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(response.toMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;支付宝调用失败，原因：&quot;</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;支付宝调用失败，原因：&quot;</span> + e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(response.toMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解除签约回调"><a href="#解除签约回调" class="headerlink" title="解除签约回调"></a>解除签约回调</h3><p>去支付宝的开放后台设置设置应用网关。用户解除签约的时候，是会回调到这个地址的</p>
<p><img src="https://cdn.learnku.com/uploads/images/202302/04/26846/0Fj1RpeZEM.png!large" alt="支付宝周期扣款逻辑梳理和代码流程设计"></p>
<p>解除签约回调代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付宝应用网关回调</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/alipayGatewayCallback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">alipayGatewayCallback</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目前只有周期扣款会回调这里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.alipaySignNotify(request);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="还可优化"><a href="#还可优化" class="headerlink" title="还可优化"></a>还可优化</h2><p>customer_period_pay_log 表里会记录本次自动扣款的状态，可能会有用户余额不足而扣款失败的情况，可以在加一个定时器来拉取这张表里扣款失败的重新尝试</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qq_41672878/article/details/126300858" title="支付宝周期扣款(支付后签约)业务功能总结(php+golang)">支付宝周期扣款(支付后签约)业务功能总结(php+golang)</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>支付宝</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员的2021年总结</title>
    <url>/posts/552b4f80-556e-11ef-b968-d9c5127d5552/</url>
    <content><![CDATA[<p>转眼间2021年也过去了，也即将迎来了农历新年的日子。</p>
<p>回首过去，感慨最深的就是时光飞逝，眨眼间，距离第一份工作已经过去了 7 年，距离第一份程序员职业也已经过去了 5 年，上一次写年终总结还是 2018 年了，这次因为疫情的原因困在杭州，心血来潮，想起来要写一篇关于过去几年的总结和对未来的展望，对自己的状态做个复盘。</p>
<p>关于工作，过去几年并不算顺利，自己也不算满意，程序员这份职业是一个日新月异，需要不断持续向自己灌输新知识才能跟上发展的步伐，随着越来越多的人知道了程序员这份职业，越来越多的人了解到程序员的高薪，越来越多的人也涌入了程序员这个行业，在中国信息时代高速发展的今天，程序员用一行行代码敲出了这个世界的丰富多彩，就像当初工地上的工人用一块块砖头垒出了一座座高楼大厦。程序员也一直自嘲是码农，而在 2021 年北京市外来新生代农民工检测报告中，曾经的自嘲也被得到了实锤。</p>
<p><img src="/images/posts/552b4f80-556e-11ef-b968-d9c5127d5552/img.png" alt="图片"></p>
<p>刚入行时也会有种错觉「会写程序的最厉害」，随着时间的推移，人的思想也会慢慢改变，觉得过去的一些想法很傻逼，技术是为了解决问题的，如果说一个技术不能解决问题，那这个技术就是一文不值。</p>
<p>从 19 年来到杭州找工作屡屡碰壁，有发了 offer 因为自己的规划无法入职的、有入职后一周发现公司文化、工作内容和自己想象有差距而离职的、有入职三个月因公司经营问题需要搬到上海工作，而自己的规划没有去上海的意愿不得已离职的。其实，找一份工作不难，找一份能称心如意的工作比较难，遇到一个好的领导、好的老板很难。</p>
<p>当然，更多的还是自己的问题</p>
<ol>
<li><p>目前没有一个拿出手的学历（即将拥有成考的毕业证）。</p>
</li>
<li><p>年龄和工作经验不符，会遭受面试官的质疑。</p>
</li>
<li><p>理论知识储备不足，欠缺系统底层知识。即使实战经验多么丰富，都要通过面试向面试官展现出来，让面试官看到你的闪光点。这一点可以通过平常写博客写教程、向开源项目贡献 PR 等渠道积累个人影响力。将平时在工作中遇到的难点整理记录下来，形成文字沉淀，发布博客平台，一是避免自己忘记，二是可以供其他人遇到相同的问题时提供一个思路。</p>
</li>
</ol>
<p>接着说 21 年的工作状态，在 21 年中学了更多种的语言</p>
<ol>
<li><p>用 <strong>Java</strong> 语言，<strong>SpringBoot</strong> 框架开发 <strong>App</strong> 端的接口</p>
</li>
<li><p>学习了 <strong>Android</strong> 语言和 <strong>Kotlin</strong> 可以独立开发安卓 <strong>App</strong></p>
</li>
<li><p>使用 <strong>Vue</strong> 开发管理系统（这个是很早就使用了）</p>
</li>
</ol>
<p>在学过并写过多种不同的语言后认识到：</p>
<ol>
<li><p>无论使用哪种语言都是服务于业务，就像上面提到的，如果一个技术不能解决问题，那么这个技术就是一文不值。平时经常会在各种群或者论坛谈论程序员开发语言的鄙视链，我觉得其实每门语言都有自己实际的应用场景，没有最好的语言，只有最适合的语言。</p>
</li>
<li><p>若真的想在程序员这个行业大放异彩，还是需要修炼内功，所有的语言底层知识都是互通的。</p>
</li>
</ol>
<p>在随着学的东西越来越多之后，就会有人讲知识灌输的多而杂，没什么卵用，有时也会因此焦虑，这就需要考虑自己的职业路径是向钻研性技术发展还是向业务型技术发展，目前我还是更加偏向于业务型发展路线，我理解的业务型发展路线是相对于钻研型技术发展路线来说，不会更加痴迷于某个技术实现原理，而是比较关注哪个技术能够更好的实现这个业务，为业务赋能，在技术层面更多的是吸取通用的编程思想，解决问题的思路，在遇到问题时能够解决问题。</p>
<p>展望 2022</p>
<p>要坚持锻炼身体，平时在各社交群组或各视频网站中时不时地会看到一些程序员体检发现 22 项异常、某程序员 997 猝死等类似标题，确实给我们敲响了警钟。锻炼身体并不需要占用大块的时间，晚上热热身，做做俯卧撑、深蹲活动活动身体各个关节，跑跑步等就可以了。最好也办张健身卡，办完每周必须得去一次<img src="https://cdn.learnku.com/uploads/images/202201/31/26846/yuxqSZyHcE.webp!large" alt="图片"></p>
<p>要坚持不定期的发布博客或公众号，包括但不限于生活、技术或工作中遇到的难点，锻炼写文章水平，起初认为写一篇技术文章有什么难得，事实上，你也许会这个技术，但你不一定能够很好的将这个技术变成文字写出来，写出来别人也不一定能看懂，好的文章一定是通俗易懂。</p>
<p>要多思考，观察身边的事物，要尽可能更多的去理解事件的底层逻辑，比如你接到了领导的任务要求你对接应用商店广告归因的功能，不能闷头就干，要理解为什么要这么做，它的商业模式是什么。当你理解它是通过广告主在应用商店投放广告，然后当用户点击了该广告会通知广告主该用户点击了这条广告，当该用户进入了 app 时广告主需要将该条消息上报给应用商店，应用商店通过越来越多的数据来学习应该如何精准的投放更容易下载并进入 app 的人群。就可以更好地思考如何设计一个健壮的系统。</p>
<p>坚持每天给自己写日报，记录每天的工作动态，就是想记录一下，对自己的工作内容有个沉淀。</p>
<p>学习理财，今年的基金跌得一塌糊涂，不过坚持长期投资主义，短期的波动影响不了我，忍住不哭<img src="https://cdn.learnku.com/uploads/images/202201/31/26846/9laH79X9kf.webp!large" alt="图片"></p>
<p>因为疫情的原因，目前我也是被困在了杭州，这可能是我最恨疫情的一次吧，原有的计划都被突如其来的疫情打乱，希望中国疫情能够早日散去阴霾，大街上能够重新看到褪去口罩的日子。</p>
<p>以上，写得有点乱，肚子里一点墨水都没有，想到哪里写到哪里，做个记录，也是希望能朝着心之所向的目标努力。</p>
<p>最后，祝愿大家新年快乐，在新的一年，都能得到自己想要的。</p>
]]></content>
      <tags>
        <tag>程序员</tag>
      </tags>
  </entry>
</search>
